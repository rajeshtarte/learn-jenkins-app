//This file is used within project root dir 
pipeline {
    agent any

    environment {
        NETLIFY_SITE_ID = 'f156bb7e-7d48-4db9-a977-3786f6f523ec'
        NETLIFY_AUTH_TOKEN = credentials('netlify-token') 
        REACT_APP_VERSION = "1.0.$BUILD_ID"
    }

    stages {
        
        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    ls -la
                    node --version
                    npm --version
                    #for non ci ,use npm install
                    npm ci
                    npm run build
                    ls -la
                '''
            }
        }
        stage('AWS') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    //disable cli entrypoint 
                    args "--entrypoint=''"
                }
            }
            environment {
                AWS_S3_BUCKET = 'learn-jenkins-202412181404'
            }
            steps {
               
                withCredentials([usernamePassword(credentialsId: 'my-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
		             sh '''
                        aws --version
                         #aws s3 ls
                         #echo "Hello S3!" > index.hml
                         aws s3 sync build s3://$AWS_S3_BUCKET
                         #aws s3 cp index.hml s3://$AWS_S3_BUCKET/index.html
                         #aws s3 cp --content-type=text/html --metadata-directive REPLACE index.hml s3://$AWS_S3_BUCKET/index.html
                     '''
	            }                
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit Test') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            reuseNode true
                        }
                    }
                    steps {
                        sh '''
                            echo "Test Stage..."                  
                            test -f build/index.html                    
                            npm test                    
                        '''
                    }
                    post {
                        always {
                            junit 'jest-results/junit.xml'
                        }
                    }
                } 
                stage('E2E') {
                    agent {
                        docker {
                            image 'my-playwright'
                            reuseNode true                   
                        }
                    }
                    steps {
                        sh '''                            
                            serve -s build &
                            sleep 10
                            npx playwright test --reporter=html
                        '''
                    }
                    post {
                        always {                            
                            //publisher html 
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Local', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }  
            }
        }         
        stage('Deploy Staging') {
            agent {
                docker {
                    image 'my-playwright'
                    reuseNode true                   
                }
            }

            environment {
                CI_ENVIRONMENT_URL = "It_will_be_set_in_steps_just_need_here_to_define"
            }
            steps {
                sh '''
                   netlify --version
                   echo "Deploying to Staging. Site id $NETLIFY_SITE_ID"
                   netlify status
                   netlify deploy --dir=build --json > deploy-output.json
                   CI_ENVIRONMENT_URL=$(jq -r '.deploy_url' deploy-output.json)                   
                   npx playwright test --reporter=html
                '''
            }
            post {
                always {                            
                    //publisher html 
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Staging E2E', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }
        //Remove Approval stage , add safeguards and verify build version
       /* stage('Approval') {
            steps {
               timeout(time: 15, unit: 'MINUTES') {
				    input message: 'Ready to deploy?', ok: 'Yes, I want to deploy'
			   }
            }
        }

        */        
        stage('Deploy Prod') {
            agent {
                docker {
                    image 'my-playwright'
                    reuseNode true                   
                }
            }

            environment {
                CI_ENVIRONMENT_URL = 'https://simplefirst-deployment.netlify.app'
            }
            steps {
                sh '''
                   netlify --version
                   echo "Deploying to production. Site id $NETLIFY_SITE_ID"
                   netlify status
                   netlify deploy --dir=build --prod
                   npx playwright test --reporter=html
                '''
            }
            post {
                always {                            
                    //publisher html 
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Prod E2E', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }            
    }    
}
